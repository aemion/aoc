<?php

declare(strict_types=1);

namespace App\Y2024;

use App\AbstractSolver;
use App\Y2024\Model\Day17Computer;

final class Day17 extends AbstractSolver
{
    private Day17Computer $computer;

    public function loadInput(string $path): void
    {
        $file = fopen($path, 'rb');

        [, $a] = explode(': ', trim(fgets($file)));
        [, $b] = explode(': ', trim(fgets($file)));
        [, $c] = explode(': ', trim(fgets($file)));
        fgets($file);
        [, $operatorsAndOperands] = explode(': ', trim(fgets($file)));
        $this->computer = new Day17Computer($operatorsAndOperands, (int) $a, (int) $b, (int) $c);
    }

    public function isFirstStarSolved(): bool
    {
        return true;
    }

    public function firstStar(): string
    {
        $this->computer->execute();

        return $this->computer->getOutput();
    }

    public function secondStar(): string
    {
        return 'NOT FOUND';
        // dd(2 ** 3, 2 << 3 >> 1);
        $max = $this->computer->getNumberOfInstructions() * 2 + 1;
        // $start = 100000000;
        $start = 8 ** 16;
        $end = 8 ** 17;
        // dd($end - $start);
        $this->computer->enableCheckMode();
        for ($i = $start; $i < $end; $i++) {
            if ($i % 100000 === 0) {
                dump($i);
            }
            $this->computer->resetProgram($i, 0, 0);
            $this->computer->execute($max);
            if ($this->computer->isAutoGenerated()) {
                return (string) $i;
            }
        }

        return 'NOT FOUND';
    }
}
